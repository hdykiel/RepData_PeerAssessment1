diff(df$newBusiness)
newBusiness <- c(721686,725145,736994)
df <- data.frame(month, newBusiness)
diff(df$newBusiness)
df$newBusiness_diff <- diff(df$newBusiness)
diff(df$newBusiness)
mean(diff(df$newBusiness))
736994-725145
newBusinessPerYear <- 12 * mean(diff(df$newBusiness))
(newBusinessPerYear <- 12 * mean(diff(df$newBusiness)))
4.5*.2
(1.22-.9)/1.22
(.23-.9)/.23
USA_population_2014 <- 318857056; #from census.gov
under_18_percentage <- .231; #from census.gov
USA_adult_population_2014 <- USA_population_2014*under_18_percentage
LM_2015_binds <- 111818
(USA_bindRate <- LM_2015_binds/USA_adult_population_2014*100)
(1.22*12-.9)/(1.22*12)
H3 <- 37
H4 <- 63
AO <- 28
total <- sum(H3,H4,AO)
policies <- c(H3,H4,AO)
total <- sum(policies)
policies/total
percent(policies/total)
library(scales)
percent(policies/total)
df<- data.frame(percent(policies/total))
names(df) <- c('H3', 'H4', 'AO')
df
colnames(percent(policies/total)) <- c('H3', 'H4', 'AO')
colnames(percent(policies/total))
H3 <- 37
H4 <- 63
AO <- 28
policies <- c(H3,H4,AO)
total <- sum(policies)
library(scales)
colnames(percent(policies/total))
(percent(policies/total))
matrix((percent(policies/total)), nrow=1)
colnames(matrix((percent(policies/total)), nrow=1)_ <- c('H3', 'H4', 'AO')
colnames(matrix((percent(policies/total)), nrow=1) <- c('H3', 'H4', 'AO')
)
colnames(matrix((percent(policies/total)), nrow=1)) <- c('H3', 'H4', 'AO')
?"matrix"
colnames(matrix((percent(policies/total)), nrow=1))) <- c('H3', 'H4', 'AO')
colnames(matrix(percent(policies/total), nrow=1)) <- c('H3', 'H4', 'AO')
percent(policies/total)
49+29+22
13.6+14
H3 <- 37
H4 <- 63
AO <- 28
policies <- c(H3,H4,AO)
names <- c('H3', 'H4', 'AO')
total <- sum(policies)
library(scales)
mix <- percent(policies/total)
df <- data.frame(names, mix)
df
16.5/55
500*.17
H3 <- 37
H4 <- 63
AO <- 28
policies <- c(H3,H4,AO)
LOB <- c('H3', 'H4', 'AO')
total <- sum(policies)
library(scales)
mix <- percent(policies/total)
df <- data.frame(LOB, mix)
print(df)
37.5/5
45/7.5
802/940
1185-223
44821-9894
12429926*(.20/100)*(19.84/100)
.20/.51
.42/.6
14308/5111130
14308/5111130*100
1779/1297332*100
names <- c("Mailed","Mailings", "Responses")
df <- data.frame(c('Yes', 5111130, 14308), c('No', 1297332, 1779))
df
names(df) <- names
df <- data.frame(names,c('Yes', 5111130, 14308), c('No', 1297332, 1779))
df
names <- c("Mailed","Mailings", "Responses")
df <- data.frame(names,c('Yes', 5111130, 14308), c('No', 1297332, 1779))
df
mailed <- c('Yes', 'No')
responses <- c(14308,1779)
mailings <- c(5111130,1297332)
df <- data.frame(mailed,responses,mailings)
df
mailed <- c('Yes', 'No')
responses <- c(14308,1779)
groupSize <- c(5111130,1297332)
df <- data.frame(mailed,mailings,responses)
(df <- data.frame(mailed,mailings,responses))
(df <- data.frame(mailed,groupSize,responses))
df$responseRate <- df$responses/groupSize
df
df$responseRate <- df$responses/groupSize*100
df
library(scales)
df$responseRate <- percent(df$responses/groupSize)
df
df[1,"respnseRate"]
df[1,"responseRate"]
df$responseRate[1]
df$responseRate[df$mailed='Yes']
df$responseRate[df$mailed=='Yes']
incrementalRR <- df$responseRate[df$mailed=='Yes'] - df$responseRate[df$mailed=='No']
(df <- data.frame(mailed,groupSize,responses))
df$responseRate <- percent(df$responses/groupSize)
incrementalRR <- df$responseRate[df$mailed=='Yes'] - df$responseRate[df$mailed=='No']
df$responseRate <- df$responses/groupSize
df$responseRate <- df$responses/df$groupSize
incrementalRR <- df$responseRate[df$mailed=='Yes'] - df$responseRate[df$mailed=='No']
df
incrementalRR
incrementalRR*100
incrementalRR/df$responseRate[df$mailed=='Yes']
drivenRate <- incrementalRR/df$responseRate[df$mailed=='Yes']
fieldResponses <- c(2629,544)
drcResponses <- c(7765,561)
(df <- data.frame(mailed,groupSize,totalResponses, fieldResponses, drcResponses,internetResponses))
totalResponses <- c(14308,1779)
fieldResponses <- c(2629,544)
drcResponses <- c(7765,561)
internetResponses <- c(3914,674)
groupSize <- c(5111130,1297332)
#save to data frame
(df <- data.frame(mailed,groupSize,totalResponses, fieldResponses, drcResponses,internetResponses))
df$fieldRR <- df$fieldResponses/groupSize
df
df$dcrRR <- df$drcResponses/df$groupSize
groupSize
fieldResponses/groupSize
df$internetRR <- df$internetResponses/df$groupSize
df
channel <- c('All', 'Field', 'DRC', 'Internet')
groupSize <- seq(5111130, length(channel))
groupsize
groupSize
lenghth(channe;)
lenghth(channel)
length(channel)
groupSize <- rep(5111130, length(channel))
groupSize
groupSize <- c(rep(5111130, length(channel), rep(1297332, length(channel)))
)
groupSize <- c(rep(5111130, length(channel), rep(1297332, length(channel)))
groupSize
groupSize
rep(1297332, length(channel))
groupSize <- c(rep(5111130, length(channel), rep(1297332, length(channel))))
groupSize <- c(rep(5111130, length(channel)), rep(1297332, length(channel)))
groupSize
channel <- rep(c('All', 'Field', 'DRC', 'Internet'),2)
groupSize <- c(rep(5111130, length(channel)/2), rep(1297332, length(channel)/2))
df2 <- data.frame(channel, groupSize)
df2
mailed <- c(rep('Yes',4),rep('No',4))
df2 <- data.frame(channel, mailed, groupSize)
(df2 <- data.frame(channel, mailed, groupSize))
responses <- c(14308,	2629,	7765,	3914,	1779,	544,	561,	674)
(df2 <- data.frame(channel, mailed, groupSize))
(df2 <- data.frame(channel, mailed, groupSize, responses))
df$RR <- responses/groupSize
(df <- data.frame(channel, mailed, groupSize, responses))
df$RR <- df$responses/df$groupSize
(df <- data.frame(channel, mailed, gr)
(df$RR <- df$responses/df$groupSize)
)
(df$RR <- df$responses/df$groupSize)
df
?subset
df_noMail <- subset(df, mailed == 'No')
(df_noMail <- subset(df, mailed == 'No'))
colnames(df_noMail)[RR]
colnames(df_noMail)[5]
colnames(df_noMail)["RR"]
colnames(df_noMail)[which(names(df_noMail) == 'RR')]
colnames(df_noMail)[which(names(df_noMail) == 'RR')] <- "baseRR"
df_noMail
colnames(df_noMail)
names(df_noMail) %in% c("RR")
names(df_noMail) %in% c("baseRR")
which(names(df_noMail) %in% c("baseRR"))
df_noMail <- df_noMail[ , which(names(df_noMail) %in% c('baseRR', 'channel'))]
df_noMail
df <- merge(x = df, y = df_noMail, by = "channel", all.x = TRUE) #left inner join to get baseRR value
df
(df_Mail <- subset(df, mailed == 'Yes')) #subset no mail
df <- merge(x = df_Mail, y = df_noMail, by = "channel", all.x = TRUE) #left inner join to get baseRR value
df
channel <- rep(c('All', 'Field', 'DRC', 'Internet'),2)
groupSize <- c(rep(5111130, length(channel)/2), rep(1297332, length(channel)/2))
mailed <- c(rep('Yes',4),rep('No',4))
responses <- c(14308,	2629,	7765,	3914,	1779,	544,	561,	674)
#save to data frame
(df <- data.frame(channel, mailed, groupSize, responses))
(df$RR <- df$responses/df$groupSize)
channel <- rep(c('All', 'Field', 'DRC', 'Internet'),2)
mailed <- c(rep('Yes',4),rep('No',4))
groupSize <- c(rep(5111130, length(channel)/2), rep(1297332, length(channel)/2))
responses <- c(14308,	2629,	7765,	3914,	1779,	544,	561,	674)
#save to data frame
(df <- data.frame(channel, mailed, groupSize, responses))
df$RR <- df$responses/df$groupSize
(df_noMail <- subset(df, mailed == 'No')) #subset no mail
(df_Mail <- subset(df, mailed == 'Yes')) #subset  mail
colnames(df_noMail)[which(names(df_noMail) == 'RR')] <- "baseRR" #rename column
df_noMail <- df_noMail[ , which(names(df_noMail) %in% c('baseRR', 'channel'))]
df <- merge(x = df_Mail, y = df_noMail, by = "channel", all.x = TRUE) #left inner join to get baseRR value
df
channel <- rep(c('All', 'Field', 'DRC', 'Internet'),2)
groupSize <- c(rep(5111130, length(channel)/2), rep(1297332, length(channel)/2))
mailed <- c(rep('Yes',4),rep('No',4))
#save to data frame
responses <- c(14308,	2629,	7765,	3914,	1779,	544,	561,	674)
(df <- data.frame(channel, mailed, groupSize, responses))
df$RR <- df$responses/df$groupSize
(df_noMail <- subset(df, mailed == 'No')) #subset no mail
(df_Mail <- subset(df, mailed == 'Yes')) #subset  mail
colnames(df_noMail)[which(names(df_noMail) == 'RR')] <- "baseRR" #rename column
df_noMail <- df_noMail[ , which(names(df_noMail) %in% c('baseRR', 'channel'))] #drop columns
df_Mail <- df_Mail[ , -which(names(df_noMail) %in% c('groupSize', 'responses'))] #drop columns
df <- merge(x = df_Mail, y = df_noMail, by = "channel", all.x = TRUE) #left inner join to get baseRR value
(df_Mail <- subset(df, mailed == 'Yes')) #subset  mail
(df_noMail <- subset(df, mailed == 'No')) #subset no mail
df_noMail <- df_noMail[ , which(names(df_noMail) %in% c('baseRR', 'channel'))] #drop columns
df_Mail <- df_Mail[ , -which(names(df_noMail) %in% c('groupSize', 'responses'))] #drop columns
df_Mail
-which(names(df_noMail) %in% c('groupSize', 'responses'))
df_Mail <- df_Mail[ , -which(names(df_Mail) %in% c('groupSize', 'responses'))] #drop columns
df <- merge(x = df_Mail, y = df_noMail, by = "channel", all.x = TRUE) #left inner join to get baseRR value
df
(df_noMail <- subset(df, mailed == 'No')) #subset no mail
(df_Mail <- subset(df, mailed == 'Yes')) #subset  mail
colnames(df_noMail)[which(names(df_noMail) == 'RR')] <- "baseRR" #rename column
df_noMail <- df_noMail[ , which(names(df_noMail) %in% c('baseRR', 'channel'))] #drop columns
df_Mail <- df_Mail[ , -which(names(df_Mail) %in% c('groupSize', 'responses'))] #drop columns
df <- merge(x = df_Mail, y = df_noMail, by = "channel", all.x = TRUE) #left inner join to get baseRR value
df
df$incRR <- df$RR - df$baseRR
df
df$incRR <- percent(df$RR - df$baseRR)
df
df$incRR <- (df$RR - df$baseRR)
df$drivenRate <- df$incRR/df$RR
df
df$drivenRate <- percent(df$incRR/df$RR)
df
setwd("C:/Users/n0278855/Dropbox/Coursera Data Science/reproducibleResearch/assignment1/RepData_PeerAssessment1-master/")
df <- read.csv('Data/activity.csv') #Load Data
df <- df[!is.na(df), ] #remove NAs
df_summarized <- ddply(df, c("date"), summarize, sumSteps = sum(steps))
#plot results
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) #rotate x axis labels
library(ggplot2)
library(plyr)
df_summarized <- ddply(df, c("date"), summarize, sumSteps = sum(steps)) #summarize
#plot results
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) #rotate x axis labels
geom_bar(stat="identity", fill = 'lightblue') +
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'lightblue') +
theme(axis.text.x = element_text(angle = 90)) #rotate x axis labels
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'lightblue') +
theme(axis.text.x = element_text(angle = 90)) #rotate x axis labels
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) #rotate x axis labels
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
ggtitle('title')
ggtitle('Steps Per Day')
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
ggtitle('Steps Per Day')
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
ggtitle('Steps Per Day') +
theme(axis.title = element_text(face=bold, size=16))
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
ggtitle('Steps Per Day') +
theme(axis.title = element_text(face='bold', size=16))
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
geom_bar(stat="identity", fill = 'blue') +
ggtitle('Steps Per Day') +
theme(plot.title = element_text(face='bold', size=16))
mean(df_summarized$sumSteps)
mean(df_summarized$sumSteps, na.rm = TRUE)
median(df_summarized$sumSteps, na.rm = TRUE)
names(df)
ggplot(data=df, aes(interval, steps)) + geom_line()
ggplot(data=df, aes(mean(interval), steps)) + geom_line()
ggplot(data=df, aes(interval, steps)) + geom_line()
mean(df_summarized$sumSteps, na.rm = TRUE)
head(df)
head(df[df$interval == 0])
head(df[df$interval == 0,])
ggplot(data=df, aes(interval, steps)) +
geom_line() +
stat_summary(fun.y = mean) +
theme(plot.title = element_text(face='bold', size=16))
ggtitle('Steps Per5 Minute Interval') +
df <- df[!is.na(df), ] #remove NAs
df <- df[!is.na(df), ] #remove NAs
ggplot(data=df, aes(interval, steps)) +
stat_summary(fun.y = mean) +
geom_line() +
ggtitle('Steps Per5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
ggplot(data=df, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = line) +
ggtitle('Steps Per5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
ggplot(data=df, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = 'line') +
ggtitle('Steps Per5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
geom_text(data=df[max(df$steps),])
ggplot(data=df, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = 'line') +
ggtitle('Steps Per 5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16)) +
geom_text(data=df[max(df$steps),])
ggplot(data=df, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = 'line') +
ggtitle('Steps Per 5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
avg_steps_by_interval <- ddply(df, c("interval"), summarize, avgSteps = mean(steps)) #summarize
head(avg_steps_by_interval)
head(avg_steps_by_interval,50)
head(avg_steps_by_interval,200)
max(avg_steps_by_interval$avgSteps)
max(avg_steps_by_interval$avgSteps, na.rm = TRUE)
avg_steps_by_interval$interval[max(avg_steps_by_interval$avgSteps, na.rm = TRUE),]
avg_steps_by_interval[max(avg_steps_by_interval$avgSteps, na.rm = TRUE), avg_steps_by_interval$interval]
avg_steps_by_interval$interval
avg_steps_by_interval$interval[max(avg_steps_by_interval$avgSteps),]
avg_steps_by_interval$interval[max(avg_steps_by_interval$avgSteps)]
avg_steps_by_interval$interval[max(avg_steps_by_interval$avgSteps, na.rm = TRUE)]
head(avg_steps_by_interval)
max(avg_steps_by_interval$avgSteps)
max(avg_steps_by_interval$avgSteps, na.rm = T)
avg_steps_by_interval[avg_steps_by_interval$avgSteps == max(avg_steps_by_interval$avgSteps, na.rm = T), ]
avg_steps_by_interval[avg_steps_by_interval$avgSteps == max(avg_steps_by_interval$avgSteps, na.rm = T), which(names(avg_steps_by_interval) == 'interval')]
avg_steps_by_interval$interval[avg_steps_by_interval$avgSteps == max(avg_steps_by_interval$avgSteps, na.rm = T)]
busiestInterval <- !is.na(avg_steps_by_interval$interval[avg_steps_by_interval$avgSteps == max(avg_steps_by_interval$avgSteps, na.rm = T)])
busiestInterval
busiestInterval <- subset(busiestInterval, !is.na(busiestInterval))
busiestInterval
busiestInterval <- (avg_steps_by_interval$interval[avg_steps_by_interval$avgSteps == max(avg_steps_by_interval$avgSteps, na.rm = T)])
busiestInterval <- subset(busiestInterval, !is.na(busiestInterval))
busiestInterval
835/60
is.na(df)
!is.na(df)
sum(is.na(df))
df <- read.csv('Data/activity.csv') #Load Data
sum(is.na(df))
df <- df[!is.na(df), ] #remove NAs
sum(is.na(df))
df
is.na(df)
sum(is.na(df$steps))
df <- read.csv('Data/activity.csv') #Load Data
sum(is.na(df$steps))
df <- df[!is.na(df), ] #remove NAs
sum(is.na(df$steps))
is.na(df$steps)
summary(df)
df <- read.csv('Data/activity.csv') #Load Data
summary(df)
df <- df[!is.na(df$steps), ] #remove NAs
summary(df)
df <- read.csv('Data/activity.csv') #Load Data
df <- df[!is.na(df$steps), ] #remove NAs
df_summarized <- ddply(df2, c("date"), summarize, sumSteps = sum(steps)) #summarize
df <- read.csv('Data/activity.csv') #Load Data
df2 <- df[!is.na(df$steps), ] #remove NAs
df_summarized <- ddply(df2, c("date"), summarize, sumSteps = sum(steps)) #summarize
#plot results
ggplot(data=df_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
ggtitle('Steps Per Day') +
theme(plot.title = element_text(face='bold', size=16))
#Calculate mean & median
mean(df_summarized$sumSteps, na.rm = TRUE)
median(df_summarized$sumSteps, na.rm = TRUE)
#DAILY ACTIVITY PATTERN
stat_summary(fun.y = mean, geom = 'line') +
ggplot(data=df2, aes(interval, steps)) +
ggtitle('Steps Per 5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
head(df2)
ggplot(data=df2, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = 'line') +
ggtitle('Steps Per 5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
avg_steps_by_interval <- ddply(df2, c("interval"), summarize, avgSteps = sum(steps)) #summarize
#Print busiest time
busiestInterval <- (avg_steps_by_interval$interval[avg_steps_by_interval$avgSteps == max(avg_steps_by_interval$avgSteps, na.rm = T)])
busiestInterval
summary(df)
summary(df2)
sum(is.na(df$steps))
paste(c('text',sum(is.na(df$steps))))
print(paste(c('text',sum(is.na(df$steps)))))
install.packages("VIM")
library(VIM)
install.packages("mice")
library(mice) #used to impute missing values
df3 <- mice(df, seed = 500)
df3$imp$steps
ggplot(data=df3, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = 'line') +
ggtitle('Avg Steps Per 5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
df3 <- complete(temData, 1)
tempData <- mice(df, seed = 500) #impute missing values
df3 <- complete(tempData, 1)
ggplot(data=df3, aes(interval, steps)) +
stat_summary(fun.y = mean, geom = 'line') +
ggtitle('Avg Steps Per 5 Minute Interval') +
theme(plot.title = element_text(face='bold', size=16))
df3_summarized <- ddply(df3, c("date"), summarize, sumSteps = sum(steps)) #summarize
#Plot new data set
ggplot(data=df3_summarized, mapping = aes(x=date, y=sumSteps)) +
geom_bar(stat="identity", fill = 'blue') +
theme(axis.text.x = element_text(angle = 90)) + #rotate x axis labels
ggtitle('Steps Per Day') +
theme(plot.title = element_text(face='bold', size=16))
mean(df3_summarized$sumSteps, na.rm = TRUE)
median(df3_summarized$sumSteps, na.rm = TRUE)
mean(df2_summarized$sumSteps, na.rm = TRUE)
df2_summarized <- ddply(df2, c("date"), summarize, sumSteps = sum(steps)) #summarize
mean(df2_summarized$sumSteps, na.rm = TRUE)
median(df2_summarized$sumSteps, na.rm = TRUE)
?weekdays
weekdays(df3$date)
intall.packages("chron")
install.packages("chron")
library(chron)
weekend(df3$date)
is.weekend(df3$date)
df3$weekend <- is.weekend(df3$date)
head(df3)
for (i in 1:length(df3)) {
if (is.weekend(d3$date)) {
df3$dayType[i] <- 'weekend'
} else {
df3$dayType[i] <- 'weekday'
}
}
for (i in 1:length(df3)) {
if (is.weekend(df3$date)) {
df3$dayType[i] <- 'weekend'
} else {
df3$dayType[i] <- 'weekday'
}
}
for (i in 1:length(df3)) {
df3$dayType[i] <- 'weekend'
if (is.weekend(df3$date[i])) {
} else {
df3$dayType[i] <- 'weekday'
}
}
head(df3,50)
head(df3,1000)
df3[1000:2000,]
for (i in 1:length(df3)) {
if (is.weekend(df3$date[i])) {
df3$dayType[i] <- 'weekend'
} else {
df3$dayType[i] <- 'weekday'
}
}
df3[1000:2000,]
df3$dayType <- NA
df3[1000:2000,]
for (i in 1:length(df3)) {
if (is.weekend(df3$date[i])) {
df3$dayType[i] <- 'weekend'
} else {
df3$dayType[i] <- 'weekday'
}
}
df3[1000:2000,]
